(window.webpackJsonp=window.webpackJsonp||[]).push([[352],{1175:function(s,a,t){"use strict";t.r(a);var n=t(4),r=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"方法引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法引用"}},[s._v("#")]),s._v(" 方法引用")]),s._v(" "),a("h2",{attrs:{id:"_1、方法引用-了解-有快捷键"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、方法引用-了解-有快捷键"}},[s._v("#")]),s._v(" 1、方法引用( :: 了解，有快捷键 )")]),s._v(" "),a("blockquote",[a("p",[s._v("我们在使用lambda时，如果方法体中只有一个方法的调用的话(包括构造方法)，我们可以用方法引用进一步简化代码。")])]),s._v(" "),a("h3",{attrs:{id:"_1-1、推荐用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、推荐用法"}},[s._v("#")]),s._v(" 1.1、推荐用法")]),s._v(" "),a("blockquote",[a("p",[s._v("我们在使用lambda时不需要考虑什么时候用方法引用，用哪种方法引用,方法引用的格式是什么。")]),s._v(" "),a("p",[s._v("我们只需要在写完lambda方法发现方法体只有一行代码,并且是方法的调用时使用快捷键尝试是否能够转换成方法引用即可。")]),s._v(" "),a("p",[s._v("当我们方法引用使用的多了慢慢的也可以直接写出方法引用。")])]),s._v(" "),a("h3",{attrs:{id:"_1-2、基本格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、基本格式"}},[s._v("#")]),s._v(" 1.2、基本格式")]),s._v(" "),a("blockquote",[a("p",[s._v("类名或者对象名::方法名")])]),s._v(" "),a("h2",{attrs:{id:"_2、语法详解-了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、语法详解-了解"}},[s._v("#")]),s._v(" 2、语法详解(了解)")]),s._v(" "),a("h3",{attrs:{id:"_2-1、引用静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、引用静态方法"}},[s._v("#")]),s._v(" 2.1、引用静态方法")]),s._v(" "),a("p",[s._v("其实就是引用类的静态方法")]),s._v(" "),a("p",[s._v("格式")]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v("类名::方法名\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("使用前提")]),s._v(" "),a("blockquote",[a("p",[s._v("如果我们在重写方法的时候，方法体中只有一行代码，")]),s._v(" "),a("p",[s._v("并且这行代码是调用了某个类的静态方法，并且我们把要重写的抽象方法中所有的参数都按照顺序传入了这个静态方法中")]),s._v(" "),a("p",[s._v("这个时候我们就可以引用类的静态方法。")])]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("p",[s._v("如下代码就可以用方法引用进行简化")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Author")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" authors "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" getAuthors "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Stream")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Author")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" authorStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" authors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("stream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nauthorStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("map "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("author "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("valueOf "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_2-2、引用对象的实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、引用对象的实例方法"}},[s._v("#")]),s._v(" 2.2、引用对象的实例方法")]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v("格式\n对象征::方法名\n\n使用前提\n如果我们在重写方法的时候，方法体中只有一行代码，并且这行代码是调用了某个对象的成员方法，并且我们把要重写的抽象方法中所有的参数都按照顺序传入了这个成员方法中，这个时候我们就可以弓|用对象的实例方法\n\n例如:\nList<Author> authors = getAuthors();\nStream<Author> authorstream = authors.stream();\nStringBuilder sb = new StringBuilder();\nauthorstream.map (author -> author.getName () )\n.forEach (name-> sb.append(name)) ;\n\n优化后:\n.forEach (sb::append);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h3",{attrs:{id:"_2-3、引用类的实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、引用类的实例方法"}},[s._v("#")]),s._v(" 2.3、引用类的实例方法")]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v('格式\n类名::方法名\n\n使用前提\n如果我们在重写方法的时候，方法体中只有一-行代码,并且这行代码是*调用了第一个参数的成员方法**,并且我们把要重写的抽象方\n法中剩余的所有的参数都按照顺序传入了这个成员方法中，这个时候我们就可以引用类的实例方法。\n\n例如\n\ninterface UseString{\n\nString use(String str,int start, int 1ength);\n\n}\n\npub1ic static string subAuthorName(String str, UseString usestring){\n    int start = 0;\n    int 1ength = 1;\n    return useString.use(str ,start,length);\n}\n\npublic static void main(String[] args) {\n\tList<Author> authors = getAuthors ();\n\tsubAuthorName("三更草堂"，new Usestring() {\n        @override\n        pub1ic String use(String str, int start, int length) {\n        \treturn str.substring(start, length) ;\n        });\n     }\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("h3",{attrs:{id:"_2-4、构造器引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4、构造器引用"}},[s._v("#")]),s._v(" 2.4、构造器引用")]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v('如果方法体中的一行代码是构造器的话就可以使用构造器引用。\nI\n回格式\n类名::new\n\n使用前提\n如果我们在重写方法的时候，方法体中只有一行代码， 并且这行代码是调用了某个类的构造方法，并且我们把要重写的抽象方法中的所有的参数都按照顺序传入了这个构造方法中，这个时候我们就可以弓|用构造器。\n\n例如: \nList<Author> authors = getAuthors ();\nauthors.stream()\n.map(author -> author.getName())\n.map(name -> new StringBuilder(name))\n.map(sb -> sb.append("测试").toString())\n.forEach(str-> system.out.print1n(str));\n\n优化后\n.map(StringBuilder::new)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);