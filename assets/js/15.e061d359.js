(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{1195:function(t,e,r){"use strict";r.r(e);var a=r(4),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"异常处理-错误码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异常处理-错误码"}},[t._v("#")]),t._v(" 异常处理（错误码）")]),t._v(" "),e("p",[t._v("本章节，将讲解异常相关的统一响应、异常处理、业务异常、错误码这 4 块的内容。")]),t._v(" "),e("h2",{attrs:{id:"_1-统一响应"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-统一响应"}},[t._v("#")]),t._v(" 1. 统一响应")]),t._v(" "),e("p",[t._v("后端提供 RESTful API 给前端时，需要响应前端 API 调用是否成功：")]),t._v(" "),e("ul",[e("li",[t._v("如果成功，成功的数据是什么。后续，前端会将数据渲染到页面上")]),t._v(" "),e("li",[t._v("如果失败，失败的原因是什么。一般，前端会将原因弹出提示给用户")])]),t._v(" "),e("p",[t._v("因此，需要有"),e("strong",[t._v("统一响应")]),t._v("，而不能是每个接口定义自己的风格。一般来说，统一响应返回信息如下：")]),t._v(" "),e("ul",[e("li",[t._v("成功时，返回成功的状态码 + 数据")]),t._v(" "),e("li",[t._v("失败时，返回失败的状态码 + 错误提示")])]),t._v(" "),e("p",[t._v("在标准的 RESTful API 的定义，是推荐使用 "),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP 响应状态码 "),e("OutboundLink")],1),t._v("作为状态码。一般来说，我们实践很少这么去做，主要原因如下：")]),t._v(" "),e("ul",[e("li",[t._v("业务返回的错误状态码很多，HTTP 响应状态码无法很好的映射。例如说，活动还未开始、订单已取消等等")]),t._v(" "),e("li",[t._v("学习成本高，开发者对 HTTP 响应状态码不是很了解。例如说，可能只知道 200、403、404、500 几种常见的")])]),t._v(" "),e("h3",{attrs:{id:"_1-1-commonresult"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-commonresult"}},[t._v("#")]),t._v(" 1.1 CommonResult")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("ruoyi-vue-pro")]),t._v(" "),e("OutboundLink")],1),t._v("项目在实践时，将状态码放在 Response Body 响应内容中返回。一共有 3 个字段，通过 "),e("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/pojo/CommonResult.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("CommonResult "),e("OutboundLink")],1),t._v("定义如下：")]),t._v(" "),e("img",{attrs:{src:r(495)}}),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 成功响应")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    code"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        username"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yudaoyuanma"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 失败响应")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    code"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("233666")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    message"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"徐妈太丑了"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br")])]),e("p",[t._v("可以增加 success 字段吗？")]),t._v(" "),e("p",[t._v("有些团队在实践时，会增加了 "),e("code",[t._v("success")]),t._v(" 字段，通过 "),e("code",[t._v("true")]),t._v(" 和 "),e("code",[t._v("false")]),t._v(" 表示成功还是失败。\n这个看每个团队的习惯吧。艿艿的话，还是偏好基于约定，返回 "),e("code",[t._v("0")]),t._v(" 时表示成功。")]),t._v(" "),e("p",[t._v("失败时的 "),e("code",[t._v("code")]),t._v(" 字段，使用全局的错误码，稍后在 "),e("a",{attrs:{href:"https://doc.iocoder.cn/exception/#_4-%E9%94%99%E8%AF%AF%E7%A0%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("「4. 错误码」"),e("OutboundLink")],1),t._v(" 小节来讲解。")]),t._v(" "),e("p",[t._v("① 在 RESTful API 成功时，定义 Controller 对应方法的返回类型为 CommonResult，并调用 "),e("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/pojo/CommonResult.java#L63-L69",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("#success(T data)")]),t._v(" "),e("OutboundLink")],1),t._v("方法来返回。代码如下图：")]),t._v(" "),e("img",{attrs:{src:r(496)}}),t._v(" "),e("p",[t._v("CommonResult 的 "),e("code",[t._v("data")]),t._v(" 字段是"),e("strong",[t._v("泛型")]),t._v("，建议定义对应的 VO 类，而不是使用 Map 类。")]),t._v(" "),e("p",[t._v("② 在 RESTful API 失败时，通过抛出 Exception 异常，具体在 "),e("a",{attrs:{href:"https://doc.iocoder.cn/exception/#_2-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86",target:"_blank",rel:"noopener noreferrer"}},[t._v("「2. 异常处理」"),e("OutboundLink")],1),t._v(" 小节。")]),t._v(" "),e("h3",{attrs:{id:"_1-2-使用-controlleradvice"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-使用-controlleradvice"}},[t._v("#")]),t._v(" 1.2 使用 "),e("code",[t._v("@ControllerAdvice")]),t._v(" ？")]),t._v(" "),e("p",[t._v("在 Spring MVC 中，可以使用 "),e("code",[t._v("@ControllerAdvice")]),t._v(" 注解，通过 Spring AOP 拦截修改 Controller 方法的返回结果，从而实现全局的统一返回。")]),t._v(" "),e("p",[t._v("使用 @ControllerAdvice 注解的实战案例？")]),t._v(" "),e("p",[t._v("如果你感兴趣的话，可以阅读 "),e("a",{attrs:{href:"https://www.iocoder.cn/Spring-Boot/SpringMVC/?yudao",target:"_blank",rel:"noopener noreferrer"}},[t._v("《芋道 Spring Boot SpringMVC 入门 》 "),e("OutboundLink")],1),t._v("文章的「4. 全局统一返回 」小节。")]),t._v(" "),e("p",[t._v("为什么项目不采用这种方式呢？主要原因是，这样的方式“破坏”了方法的定义，导致一些隐性的问题。例如说，Swagger 接口定义错误，展示的响应结果不是 CommonResult。")]),t._v(" "),e("p",[t._v("还有个原因，部分 RESTful API 不需要自动包装 CommonResult 结果。例如说，第三方支付回调只需要返回 "),e("code",[t._v('"success"')]),t._v(" 字符串。")]),t._v(" "),e("h2",{attrs:{id:"_2-异常处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-异常处理"}},[t._v("#")]),t._v(" 2. 异常处理")]),t._v(" "),e("p",[t._v("RESTful API 发生异常时，需要拦截 Exception 异常，转换成"),e("strong",[t._v("统一响应")]),t._v("的格式，否则前端无法处理。")]),t._v(" "),e("h3",{attrs:{id:"_2-1-spring-mvc-的异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-spring-mvc-的异常"}},[t._v("#")]),t._v(" 2.1 Spring MVC 的异常")]),t._v(" "),e("p",[t._v("在 Spring MVC 中，通过 "),e("code",[t._v("@ControllerAdvice")]),t._v(" + "),e("code",[t._v("@ExceptionHandler")]),t._v(" 注解，声明将指定类型的异常，转换成对应的 CommonResult 响应。实现的代码，可见 "),e("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-web/src/main/java/cn/iocoder/yudao/framework/web/core/handler/GlobalExceptionHandler.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("GlobalExceptionHandler "),e("OutboundLink")],1),t._v("类，代码如下：")]),t._v(" "),e("img",{attrs:{src:r(497)}}),t._v(" "),e("h3",{attrs:{id:"_2-2-filter-的异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-filter-的异常"}},[t._v("#")]),t._v(" 2.2 Filter 的异常")]),t._v(" "),e("p",[t._v("在请求被 Spring MVC 处理之前，是先经过 Filter 处理的，此时发生异常时，是无法通过 "),e("code",[t._v("@ExceptionHandler")]),t._v(" 注解来处理的。只能通过 "),e("code",[t._v("try catch")]),t._v(" 的方式来实现，代码如下：")]),t._v(" "),e("img",{attrs:{src:r(498)}}),t._v(" "),e("h2",{attrs:{id:"_3-业务异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-业务异常"}},[t._v("#")]),t._v(" 3. 业务异常")]),t._v(" "),e("p",[t._v("在 Service 发生业务异常时，如果进行返回呢？例如说，用户名已经存在，商品库存不足等。常用的方案选择，主要有两种：")]),t._v(" "),e("ul",[e("li",[t._v("方案一，使用 CommonResult 统一响应结果，里面有错误码和错误提示，然后进行 "),e("code",[t._v("return")]),t._v(" 返回")]),t._v(" "),e("li",[t._v("方案二，使用 ServiceException 统一业务异常，里面有错误码和错误提示，然后进行 "),e("code",[t._v("throw")]),t._v(" 抛出")])]),t._v(" "),e("p",[t._v("选择方案一 CommonResult 会存在两个问题：")]),t._v(" "),e("ul",[e("li",[t._v("因为 Spring "),e("code",[t._v("@Transactional")]),t._v(" 声明式事务，是基于异常进行回滚的，如果使用 CommonResult 返回，则事务回滚会非常麻烦")]),t._v(" "),e("li",[t._v("当调用别的方法时，如果别人返回的是 CommonResult 对象，还需要不断的进行判断，写起来挺麻烦的")])]),t._v(" "),e("p",[t._v("因此，项目采用方案二 ServiceException 异常。")]),t._v(" "),e("h3",{attrs:{id:"_3-1-serviceexception"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-serviceexception"}},[t._v("#")]),t._v(" 3.1 ServiceException")]),t._v(" "),e("p",[t._v("定义 "),e("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/exception/ServiceException.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("ServiceException "),e("OutboundLink")],1),t._v("异常类，继承 RuntimeException 异常类（非受检），用于定义业务异常。代码如下：")]),t._v(" "),e("img",{attrs:{src:r(499)}}),t._v(" "),e("p",[t._v("为什么继承 RuntimeException 异常？")]),t._v(" "),e("p",[t._v("大多数业务场景下，我们无需处理 ServiceException 业务异常，而是通过 GlobalExceptionHandler 统一处理，转换成对应的 CommonResult 对象，进而提示给前端即可。\n如果真的需要处理 ServiceException 时，通过 "),e("code",[t._v("try catch")]),t._v(" 的方式进行主动捕获。")]),t._v(" "),e("h3",{attrs:{id:"_3-2-serviceexceptionutil"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-serviceexceptionutil"}},[t._v("#")]),t._v(" 3.2 ServiceExceptionUtil")]),t._v(" "),e("p",[t._v("在 Service 需抛出业务异常时，通过调用 "),e("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/exception/util/ServiceExceptionUtil.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("ServiceExceptionUtil "),e("OutboundLink")],1),t._v("的 "),e("code",[t._v("#exception(ErrorCode errorCode, Object... params)")]),t._v(" 方法来构建 ServiceException 异常，然后使用 "),e("code",[t._v("throw")]),t._v(" 进行抛出。代码如下：")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ServiceExceptionUtil.java")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServiceException")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exception")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ErrorCode")]),t._v(" errorCode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 省略参数 */")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServiceException")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exception")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ErrorCode")]),t._v(" errorCode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" params"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 省略参数 */")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("img",{attrs:{src:r(500)}}),t._v(" "),e("p",[t._v("为什么使用 ServiceExceptionUtil 来构建 ServiceException 异常？")]),t._v(" "),e("p",[t._v("错误提示的内容，支持使用管理后台进行动态配置，所以通过 ServiceExceptionUtil 获取内容的配置与格式化。")]),t._v(" "),e("h2",{attrs:{id:"_4-错误码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-错误码"}},[t._v("#")]),t._v(" 4. 错误码")]),t._v(" "),e("p",[t._v("错误码，对应 "),e("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/exception/ErrorCode.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("ErrorCode "),e("OutboundLink")],1),t._v("类，枚举项目中的错误，"),e("strong",[t._v("全局唯一")]),t._v("，方便定位是谁的错、错在哪。")]),t._v(" "),e("img",{attrs:{src:r(501)}}),t._v(" "),e("h3",{attrs:{id:"_4-1-错误码分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-错误码分类"}},[t._v("#")]),t._v(" 4.1 错误码分类")]),t._v(" "),e("p",[t._v("错误码分成两类：全局的系统错误码、模块的业务错误码。")]),t._v(" "),e("h4",{attrs:{id:"_4-1-1-系统错误码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-系统错误码"}},[t._v("#")]),t._v(" 4.1.1 系统错误码")]),t._v(" "),e("p",[t._v("全局的系统错误码，使用 0-999 错误码段，和 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP 响应状态码 "),e("OutboundLink")],1),t._v("对应。虽然说，HTTP 响应状态码作为业务使用表达能力偏弱，但是使用在系统层面还是非常不错的。")]),t._v(" "),e("p",[t._v("系统错误码定义在 "),e("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/exception/enums/GlobalErrorCodeConstants.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("GlobalErrorCodeConstants "),e("OutboundLink")],1),t._v("类，代码如下：")]),t._v(" "),e("img",{attrs:{src:r(502)}}),t._v(" "),e("h4",{attrs:{id:"_4-1-2-业务错误码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-业务错误码"}},[t._v("#")]),t._v(" 4.1.2 业务错误码")]),t._v(" "),e("p",[t._v("模块的业务错误码，按照模块分配错误码的"),e("strong",[t._v("区间")]),t._v("，避免模块之间的错误码冲突。")]),t._v(" "),e("p",[t._v("① 业务错误码一共 10 位，分成 4 段，在 "),e("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/exception/enums/ServiceErrorCodeRange.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("ServiceErrorCodeRange "),e("OutboundLink")],1),t._v("分配，规则与代码如下图：")]),t._v(" "),e("img",{attrs:{src:r(503)}}),t._v(" "),e("p",[t._v("② 每个业务模块，定义自己的 ErrorCodeConstants 错误码枚举类。以 "),e("code",[t._v("yudao-module-system")]),t._v(" 模块举例子，代码如下：")]),t._v(" "),e("img",{attrs:{src:r(504)}}),t._v(" "),e("h3",{attrs:{id:"_4-2-错误码管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-错误码管理"}},[t._v("#")]),t._v(" 4.2 错误码管理")]),t._v(" "),e("p",[t._v("在管理后台的 [系统管理 -> 错误码管理] 菜单，可以进行错误码的管理。")]),t._v(" "),e("img",{attrs:{src:r(505)}}),t._v(" "),e("p",[t._v("启动中的项目会每 60 秒，加载最新的错误码配置。所以，我们在修改完错误码的提示后，无需重启项目。")]),t._v(" "),e("h4",{attrs:{id:"_4-2-1-手动添加"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-手动添加"}},[t._v("#")]),t._v(" 4.2.1 手动添加")]),t._v(" "),e("p",[t._v("点击 [新增] 按钮，进行错误码的手动添加。如下图所示：")]),t._v(" "),e("img",{attrs:{src:r(506)}}),t._v(" "),e("h4",{attrs:{id:"_4-2-2-自动添加"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-自动添加"}},[t._v("#")]),t._v(" 4.2.2 自动添加")]),t._v(" "),e("p",[t._v("通过 "),e("code",[t._v("yudao.error-code.constants-class-list")]),t._v(" 配置项，设置需要自动添加的 ErrorCodeConstants 错误码枚举类。如下图所示：")]),t._v(" "),e("img",{attrs:{src:r(507)}}),t._v(" "),e("p",[t._v("项目启动时，会自动扫描对应的 ErrorCodeConstants 中的错误码，自动添加或修改错误码的配置。")]),t._v(" "),e("p",[e("strong",[t._v("注意")]),t._v("，自动添加的错误码的类型为【自动生成】，一旦在管理后台手动 [编辑] 后，该错误码就不再支持自动修改。")]),t._v(" "),e("blockquote",[e("p",[t._v("自动添加是如何实现的？")]),t._v(" "),e("p",[t._v("参见 "),e("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/framework/errorcode/",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("system/framework/errorcode")]),t._v(" "),e("OutboundLink")],1),t._v("包的代码。")])])])}),[],!1,null,null,null);e.default=s.exports},495:function(t,e,r){t.exports=r.p+"assets/img/img_92.e2a0326a.png"},496:function(t,e,r){t.exports=r.p+"assets/img/img_93.960aec74.png"},497:function(t,e,r){t.exports=r.p+"assets/img/img_94.d131c048.png"},498:function(t,e,r){t.exports=r.p+"assets/img/img_95.ef5e2dbc.png"},499:function(t,e,r){t.exports=r.p+"assets/img/img_96.08f97b69.png"},500:function(t,e,r){t.exports=r.p+"assets/img/img_97.fa6b96da.png"},501:function(t,e,r){t.exports=r.p+"assets/img/img_98.daff999f.png"},502:function(t,e,r){t.exports=r.p+"assets/img/img_99.acab0f88.png"},503:function(t,e,r){t.exports=r.p+"assets/img/img_100.75a7c9b7.png"},504:function(t,e,r){t.exports=r.p+"assets/img/img_101.a7fffb78.png"},505:function(t,e,r){t.exports=r.p+"assets/img/img_102.e6bb85b3.png"},506:function(t,e,r){t.exports=r.p+"assets/img/img_103.f5866b10.png"},507:function(t,e,r){t.exports=r.p+"assets/img/img_104.5e81693a.png"}}]);