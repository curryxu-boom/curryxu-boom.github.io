(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{1194:function(t,a,e){"use strict";e.r(a);var r=e(4),_=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"saas-多租户【数据库隔离】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#saas-多租户【数据库隔离】"}},[t._v("#")]),t._v(" SaaS 多租户【数据库隔离】")]),t._v(" "),a("p",[t._v("本章节，讲解 SaaS 租户的 DATASOURCE 模式，实现数据库级别的隔离。")]),t._v(" "),a("p",[t._v("注意，需要前置阅读 "),a("a",{attrs:{href:"https://doc.iocoder.cn/saas-tenant",target:"_blank",rel:"noopener noreferrer"}},[t._v("《SaaS 多租户【字段隔离】》"),a("OutboundLink")],1),t._v(" 文档。")]),t._v(" "),a("h2",{attrs:{id:"_0-极速体验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-极速体验"}},[t._v("#")]),t._v(" 0. 极速体验")]),t._v(" "),a("p",[t._v("① 克隆 "),a("a",{attrs:{href:"https://gitee.com/zhijiantianya/ruoyi-vue-pro",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://gitee.com/zhijiantianya/ruoyi-vue-pro "),a("OutboundLink")],1),t._v("仓库，并切换到 "),a("code",[t._v("feature/dev-yunai")]),t._v(" 分支。")]),t._v(" "),a("p",[t._v("② 创建 "),a("code",[t._v("ruoyi-vue-pro-master")]),t._v("、"),a("code",[t._v("ruoyi-vue-pro-tenant-a")]),t._v("、"),a("code",[t._v("ruoyi-vue-pro-tenant-b")]),t._v(" 三个数据库。")]),t._v(" "),a("p",[t._v("③ 下载 "),a("a",{attrs:{href:"https://doc.iocoder.cn/file/%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%A4%9Adb.zip",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("多租户多db.zip")]),a("OutboundLink")],1),t._v(" 并解压，将 SQL 导入到对应的数据库中。")]),t._v(" "),a("p",[t._v("友情提示：")]),t._v(" "),a("p",[t._v("随着版本的迭代，SQL 脚本可能过期。如果碰到问题，可以在星球给我反馈下。")]),t._v(" "),a("p",[t._v("④ 启动前端和后端项目，即可愉快的体验了。")]),t._v(" "),a("h2",{attrs:{id:"_1-实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现原理"}},[t._v("#")]),t._v(" 1. 实现原理")]),t._v(" "),a("p",[t._v("DATASOURCE 模式，基于 "),a("a",{attrs:{href:"https://github.com/baomidou/dynamic-datasource-spring-boot-starter",target:"_blank",rel:"noopener noreferrer"}},[t._v("dynamic-datasource "),a("OutboundLink")],1),t._v("进行拓展实现。")]),t._v(" "),a("p",[t._v("核心：每次对数据库操作时，动态切换到该租户所在的数据源，然后执行 SQL 语句。")]),t._v(" "),a("h2",{attrs:{id:"_2-功能演示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-功能演示"}},[t._v("#")]),t._v(" 2. 功能演示")]),t._v(" "),a("p",[a("strong",[t._v("我们来新增一个租户，使用 DATASOURCE 模式。")])]),t._v(" "),a("p",[t._v("① 点击 [基础设施 -> 数据源配置] 菜单，点击 [新增] 按钮，新增一个名字为 "),a("code",[t._v("tenant-a")]),t._v(" 数据源。")]),t._v(" "),a("img",{attrs:{src:e(485)}}),t._v(" "),a("p",[t._v("然后，手动将如下表拷贝到 "),a("code",[t._v("ruoyi-vue-pro")]),t._v(" 主库中的如下表，拷贝到 "),a("code",[t._v("ruoyi-vue-pro-tenant-a")]),t._v(" 库中。如下图所示：")]),t._v(" "),a("img",{attrs:{src:e(486)}}),t._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("system_dept\nsystem_login_log\nsystem_notice\nsystem_notify_message\nsystem_operate_log\nsystem_post\nsystem_role\nsystem_role_menu\nsystem_social_user\nsystem_social_user_bind\nsystem_user_post\nsystem_user_role\nsystem_users\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("友情提示：")]),t._v(" "),a("p",[t._v("随着版本的迭代，可能需要拷贝更多的表。如果碰到问题，可以在星球给我反馈下。")]),t._v(" "),a("p",[t._v("② 点击 [基础设施 -> 租户管理] 菜单，点击 [新增] 按钮，新增一个名字为 "),a("code",[t._v("土豆租户")]),t._v(" 的租户，并使用 "),a("code",[t._v("tenant-a")]),t._v(" 数据源。如下图所示：")]),t._v(" "),a("img",{attrs:{src:e(487)}}),t._v(" "),a("p",[t._v("此时，在 "),a("code",[t._v("ruoyi-vue-pro-tenant-a")]),t._v(" 库中，可以查询到对应的租户管理员、角色等信息。如下图所示：")]),t._v(" "),a("img",{attrs:{src:e(488)}}),t._v(" "),a("p",[t._v("③ 退出系统，登录刚创建的租户。")]),t._v(" "),a("img",{attrs:{src:e(489)}}),t._v(" "),a("p",[t._v("至此，我们已经完成了租户的创建。")]),t._v(" "),a("p",[t._v("补充说明：")]),t._v(" "),a("p",[t._v("后续在使用时，建议把拷贝到其它租户数据库的表，从 "),a("code",[t._v("ruoyi-vue-pro")]),t._v(" 主库中进行删除。")]),t._v(" "),a("p",[t._v("目的是，主库只保留所有租户共享的全局表。例如说，菜单表、定时任表等等。")]),t._v(" "),a("h2",{attrs:{id:"_3-创建表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建表"}},[t._v("#")]),t._v(" 3. 创建表")]),t._v(" "),a("p",[t._v("在使用 DATASOURCE 模式时，数据库可以分为两种：主库、租户库。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-主库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-主库"}},[t._v("#")]),t._v(" 3.1 主库")]),t._v(" "),a("p",[t._v("① 存放所有租户共享的表。例如说：菜单表、定时任务表等等。如下图所示：")]),t._v(" "),a("img",{attrs:{src:e(490)}}),t._v(" "),a("p",[t._v("② 对应 "),a("code",[t._v("master")]),t._v(" 数据源，配置在 "),a("code",[t._v("application-{env}.yaml")]),t._v(" 配置文件。如下图所示：")]),t._v(" "),a("img",{attrs:{src:e(491)}}),t._v(" "),a("p",[t._v("③ 每个主库对应的 Mapper，必须添加 "),a("a",{attrs:{href:"https://github.com/baomidou/dynamic-datasource-spring-boot-starter/blob/master/core/src/main/java/com/baomidou/dynamic/datasource/annotation/Master.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("@Master")]),t._v(" "),a("OutboundLink")],1),t._v("注解。例如说：")]),t._v(" "),a("img",{attrs:{src:e(492)}}),t._v(" "),a("h3",{attrs:{id:"_3-2-租户库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-租户库"}},[t._v("#")]),t._v(" 3.2 租户库")]),t._v(" "),a("p",[t._v("① 存放每个租户的表。例如说：用户表、角色表等等。")]),t._v(" "),a("p",[t._v("② 在 [基础设施 -> 数据源配置] 菜单中，配置数据源。")]),t._v(" "),a("p",[t._v("③ 每个主库对应的 Mapper，必须添加 "),a("a",{attrs:{href:"https://doc.iocoder.cn/saas-tenant/dynamic/TODO",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("@TenantDS")]),a("OutboundLink")],1),t._v(" 注解。例如说：")]),t._v(" "),a("img",{attrs:{src:e(493)}}),t._v(" "),a("h3",{attrs:{id:"_3-3-租户字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-租户字段"}},[t._v("#")]),t._v(" 3.3 租户字段")]),t._v(" "),a("p",[t._v("① 考虑到拓展性，在使用 DATASOURCE 模式时，默认会叠加 COLUMN 模式，即还有 "),a("code",[t._v("tenant_id")]),t._v(" 租户字段：")]),t._v(" "),a("ul",[a("li",[t._v("在 "),a("code",[t._v("INSERT")]),t._v(" 操作时，会自动记录租户编号到 "),a("code",[t._v("tenant_id")]),t._v(" 字段。")]),t._v(" "),a("li",[t._v("在 "),a("code",[t._v("SELECT")]),t._v(" 操作时，会自动添加 "),a("code",[t._v("WHERE tenant_id = ?")]),t._v(" 查询条件。")])]),t._v(" "),a("p",[t._v("如果你不需要，可以直接删除 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/db/TenantDatabaseInterceptor.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("TenantDatabaseInterceptor "),a("OutboundLink")],1),t._v("类，以及它的 Bean 自动配置。")]),t._v(" "),a("p",[t._v("拓展性，指的是部分【大】租户独立数据库，部分【小】租户共享数据。")]),t._v(" "),a("p",[t._v("② 也因为叠加了 COLUMN 模式，"),a("strong",[t._v("主库")]),t._v("的表需要根据情况添加 "),a("code",[t._v("tenant_id")]),t._v(" 字段。")]),t._v(" "),a("ul",[a("li",[t._v("情况一：不需要添加 "),a("code",[t._v("tenant_id")]),t._v(" 字段。例如说：菜单表、定时任务表等等。注意，需要把表名添加到 "),a("code",[t._v("yudao.tenant.ignore-tables")]),t._v(" 配置项中。")]),t._v(" "),a("li",[t._v("情况二：需要 "),a("code",[t._v("tenant_id")]),t._v(" 字段。例如说：访问日志表、异常日志表等等。目的，排查是哪个租户的系统级别的日志。")])]),t._v(" "),a("h2",{attrs:{id:"_4-多数据源事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-多数据源事务"}},[t._v("#")]),t._v(" 4. 多数据源事务")]),t._v(" "),a("p",[t._v("使用 DATASOURCE 模式后，可能一个操作涉及到多个数据源。例如说：创建租户时，即需要操作主库，也需要操作租户库。")]),t._v(" "),a("p",[t._v("考虑到多数据的数据一致性，我们会采用事务的方式，而使用 Spring 事务时，会存在多数据库无法切换的问题。不了解的胖友，可以阅读 "),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/410915221",target:"_blank",rel:"noopener noreferrer"}},[t._v("《MyBatis Plus 的多数据源 "),a("code",[t._v("@DS")]),t._v(" 切换不起作用了，谁的锅 》 "),a("OutboundLink")],1),t._v("文章。")]),t._v(" "),a("p",[t._v("多数据源的事务方案，是一个老生常谈的问题。比较主流的，有如下两种，都是相对重量级的方案：")]),t._v(" "),a("ol",[a("li",[t._v("使用 "),a("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1436662",target:"_blank",rel:"noopener noreferrer"}},[t._v("Atomikos "),a("OutboundLink")],1),t._v("实现 JTA 分布式事务，配置复杂，性能较差。")]),t._v(" "),a("li",[t._v("使用 "),a("a",{attrs:{href:"https://www.iocoder.cn/Seata/install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Seata "),a("OutboundLink")],1),t._v("实现分布式事务，使用简单，性能不错，但是需要额外引入 Seata Server 服务。")])]),t._v(" "),a("h3",{attrs:{id:"_4-1-本地事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-本地事务"}},[t._v("#")]),t._v(" 4.1 本地事务")]),t._v(" "),a("p",[t._v("考虑到项目是单体架构，不适合采用重量级的事务，因此采用 "),a("a",{attrs:{href:"https://github.com/baomidou/dynamic-datasource-spring-boot-starter",target:"_blank",rel:"noopener noreferrer"}},[t._v("dynamic-datasource "),a("OutboundLink")],1),t._v("提供的 "),a("strong",[t._v("“本地事务”")]),t._v(" 轻量级方案。")]),t._v(" "),a("p",[t._v("它的实现原理是：自定义 "),a("a",{attrs:{href:"https://github.com/baomidou/dynamic-datasource-spring-boot-starter/blob/master/core/src/main/java/com/baomidou/dynamic/datasource/annotation/DSTransactional.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("@DSTransactional")]),t._v(" "),a("OutboundLink")],1),t._v("事务注解，替代 Spring "),a("code",[t._v("@Transactional")]),t._v(" 事务注解。")]),t._v(" "),a("ul",[a("li",[t._v("在逻辑执行成功时，循环提交每个数据源的事务。")]),t._v(" "),a("li",[t._v("在逻辑执行失败时，循环回滚每个数据源的事务。")])]),t._v(" "),a("p",[t._v("但是它存在一个风险点，如果数据库发生异常（例如说宕机），那么本地事务就可能会存在数据不一致的问题。例如说：")]),t._v(" "),a("ul",[a("li",[t._v("① 主库的事务提交")]),t._v(" "),a("li",[t._v("② 租户库发生异常，租户的事务提交失败")]),t._v(" "),a("li",[t._v("结果：主库的数据已经提交，而租户库的数据没有提交，就会导致数据不一致。")])]),t._v(" "),a("p",[a("strong",[t._v("因此，如果你的系统对数据一致性要求很高，那么请使用 Seata 方案。")])]),t._v(" "),a("h3",{attrs:{id:"_4-2-使用示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-使用示例"}},[t._v("#")]),t._v(" 4.2 使用示例")]),t._v(" "),a("p",[t._v("在最外层的 Service 方法上，添加 "),a("code",[t._v("@DSTransactional")]),t._v(" 注解。例如说，创建租户的 Service 方法：")]),t._v(" "),a("img",{attrs:{src:e(494)}}),t._v(" "),a("p",[t._v("注意，里面不能嵌套有 Spring 自带的事务，就是上图中【黄圈】的 Service 方法不能使用 Spring "),a("code",[t._v("@Transactional")]),t._v(" 注解，否则会导致数据源无法切换。")]),t._v(" "),a("p",[t._v("如果【黄圈】的 Service 自身还需要事务，那么可以使用 "),a("code",[t._v("@DSTransactional")]),t._v(" 注解。")])])}),[],!1,null,null,null);a.default=_.exports},485:function(t,a,e){t.exports=e.p+"assets/img/img_82.309fd26d.png"},486:function(t,a,e){t.exports=e.p+"assets/img/img_83.90a61f10.png"},487:function(t,a,e){t.exports=e.p+"assets/img/img_84.f48cdf21.png"},488:function(t,a,e){t.exports=e.p+"assets/img/img_85.afa72fd2.png"},489:function(t,a,e){t.exports=e.p+"assets/img/img_86.bcd1bd91.png"},490:function(t,a,e){t.exports=e.p+"assets/img/img_87.8cf372a7.png"},491:function(t,a,e){t.exports=e.p+"assets/img/img_88.d6105a1f.png"},492:function(t,a,e){t.exports=e.p+"assets/img/img_89.afc521af.png"},493:function(t,a,e){t.exports=e.p+"assets/img/img_90.1872f3c9.png"},494:function(t,a,e){t.exports=e.p+"assets/img/img_91.46f3d816.png"}}]);